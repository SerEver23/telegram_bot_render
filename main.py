import os
import telebot
from flask import Flask, request
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")

if not all([TELEGRAM_TOKEN, WEBHOOK_URL]):
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# Flask app
app = Flask(__name__)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
MUST_ANSWER_KEYWORDS = [
    # –†—É—Å—Å–∫–∏–π
    "—Å–∫–∞–∂–∏—Ç–µ", "–∏—â—É", "–∫–∞–∫", "–∫—Ç–æ –∑–Ω–∞–µ—Ç", "–∫—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ", "–∫—Ç–æ –º–æ–∂–µ—Ç", "–∑–Ω–∞–µ—Ç", "–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ", "–∫—Ç–æ", "–ø–æ–º–æ–≥–∏—Ç–µ", "—Å—Ç–æ",
    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π
    "—Å–∫–∞–∂—ñ—Ç—å", "—à—É–∫–∞—é", "—è–∫", "—Ö—Ç–æ –∑–Ω–∞—î", "—Ö—Ç–æ –∑–∞–π–º–∞—î—Ç—å—Å—è", "–ø—ñ–¥–∫–∞–∂—ñ—Ç—å", "–ø—ñ–¥–∫–∞–∑–∞—Ç–∏", "—Ö—Ç–æ –º–æ–∂–µ", "–∑–Ω–∞—î", "–ü–æ—Ä–∞–¥—å—Ç–µ", "—Ö—Ç–æ", "–¥–æ–ø–æ–º–æ–∂—ñ—Ç—å", "—Å—Ç–æ",
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
    "tell me", "looking for", "how", "who knows", "who does", "who handles", "can you tell me", "who can", "knows", "Please advise", "who", "help", "service station"
]

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_message(message):
    text = message.text.strip()
    lower_text = text.lower()

    # üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    must_answer = any(keyword in lower_text for keyword in MUST_ANSWER_KEYWORDS)

    # üö´ –ï—Å–ª–∏ –Ω–µ must_answer ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∫–ª–∞–º—ã
    if not must_answer:
        if len(text) > 700:
            return
        if sum(text.count(e) for e in "üåûüå≤üè°üçΩüé®üë´üë©‚Äçüè´‚úÖ‚ùåüìåüìû") >= 4:
            return
        if not any(lower_text.startswith(q) for q in ["–∫–∞–∫", "—á—Ç–æ", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–≥–¥–µ", "–º–æ–∂–Ω–æ –ª–∏", "–∫—Ç–æ", "–µ—Å—Ç—å –ª–∏", "who", "how", "where", "can"]) and "?" not in lower_text:
            return

    bot.send_chat_action(message.chat.id, 'typing')

    prompt = (
        f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∂–∏–∑–Ω–∏ –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö –∏ –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.\n"
        f"–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\"{text}\"\n\n"
        f"–ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ä–µ–∫–ª–∞–º–∞, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–π.\n"
        f"–ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–Ω–æ–≥–∏–º –≤ —á–∞—Ç–µ, –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≤–µ—Ç–∞ ‚Äî –æ—Ç–≤–µ—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ (–¥–æ 400‚Äì450 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã).\n"
        f"–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ª—É—á—à–µ –Ω–µ –æ—Ç–≤–µ—á–∞–π."
    )

    try:
        response = model.generate_content(prompt)
        reply = response.text.strip()
        if reply:
            bot.reply_to(message, reply)

    except Exception as e:
        print("–û—à–∏–±–∫–∞ Gemini:", e)
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Gemini API.")

def start_webhook():
    bot.remove_webhook()
    bot.set_webhook(f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}")
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {WEBHOOK_URL}/{TELEGRAM_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

if __name__ == "__main__":
    start_webhook()
